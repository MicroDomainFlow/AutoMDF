using AutoMapper;
using AutoMapper.QueryableExtensions;

using {ProjectName}.Core.Contracts.Aggregates.{Pluralize}.Queries;
using {ProjectName}.Core.Contracts.Aggregates.{Pluralize}.Queries.Models;
using {ProjectName}.Core.Contracts.Aggregates.{Pluralize}.QueryRepositories;
using {ProjectName}.Infrastructure.Persistence.Sql.Queries.Common;

using MDF.Framework.Infrastructure.Queries;

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace {ProjectName}.Infrastructure.Persistence.Sql.Queries.Aggregates.{Pluralize};
public class {Singular}QueryEntityFrameworkRepository : BaseQueryRepository<QueryDbContext>, I{Singular}QueryRepository
{
	private readonly IMapper _mapper;
	private readonly ILogger<{Singular}QueryEntityFrameworkRepository> _logger;
	public {Singular}QueryEntityFrameworkRepository(QueryDbContext dbContext, IMapper mapper, ILogger<{Singular}QueryEntityFrameworkRepository> logger) : base(dbContext)
	{
		_mapper = mapper;
		_logger = logger;
	}

	//Dont forget add {Pluralize} to Query db Context !
	public Task<List<{Singular}QueryDto>> ExecuteAsync(GetAll{Singular}Query query, CancellationToken cancellationToken = default)
	{
		return DbContext.{Pluralize}
					   .ProjectTo<{Singular}QueryDto>(_mapper.ConfigurationProvider)
					   .ToListAsync(cancellationToken);
	}

}
