using Content.Core.Contracts.Aggregates.{Pluralize}.Queries;
using {ProjectName}.Core.Contracts.Aggregates.{Pluralize}.Queries.ResultViewModel;
using {ProjectName}.Core.Contracts.Aggregates.{Pluralize}.QueryRepositories;

using FluentResults;

using MDF.Framework.LayersContracts.ApplicationServices.MediatorExtensions.CQRS;

using Microsoft.Extensions.Logging;

namespace {ProjectName}.Core.ApplicationService.Aggregates.{Pluralize}.QueriesHandlers;
#error This file is generated by AutoMDF. This file must be edited before use. Delete this line when editing is complete.
public class GetAll{Singular}QueryHandler : IQueryHandler<GetAll{Singular}Query, List<{Singular}QueryResult>>
{
	private readonly I{Singular}QueryRepository _{SingularVar}QueryRepository;
	private readonly ILogger<GetAll{Singular}QueryHandler> _logger;

	public GetAll{Singular}QueryHandler(ILogger<GetAll{Singular}QueryHandler> logger, I{Singular}QueryRepository {SingularVar}QueryRepository)
	{
		_logger = logger;
		_{SingularVar}QueryRepository = {SingularVar}QueryRepository;
	}

	public async Task<Result<List<{Singular}QueryResult>>> Handle(GetAll{Singular}Query request, CancellationToken cancellationToken)
	{
		var {Pluralize} = await _{SingularVar}QueryRepository.ExecuteAsync(request, cancellationToken);
		return Result.Ok({Pluralize});
	}
}
