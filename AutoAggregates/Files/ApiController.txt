using AutoMapper;

using {ProjectName}.Core.Contracts.Aggregates.{Pluralize}.Commands;
using {ProjectName}.Core.Contracts.Aggregates.{Pluralize}.Queries;
using {ProjectName}.Core.Contracts.Aggregates.{Pluralize}.Queries.Models;
using {ProjectName}.Endpoints.API.ViewModels.{Pluralize};

using MDF.Framework.Endpoints.Api;
using MDF.Framework.Extensions.Results;

using MediatR;

using Microsoft.AspNetCore.Mvc;

namespace {ProjectName}.Endpoints.API.Controllers;
[Route("api/[controller]/[action]")]
public class {Singular}Controller : BaseController
{
	private readonly ILogger<{Singular}Controller> _logger;
	public {Singular}Controller(IMediator mediator, IMapper mapper, ILogger<{Singular}Controller> logger) : base(mediator, mapper)
	{
		_logger = logger;
	}

	[ProducesResponseType(type: typeof(CustomResult<List<{Singular}QueryDto>>), statusCode: StatusCodes.Status200OK)]
	[HttpGet("")]
	public Task<IActionResult> GetAll{Singular}Async()
	{
		return QueryAsync<GetAll{Singular}Query, List<{Singular}QueryDto>>(new GetAll{Singular}Query());
	}

	[ProducesResponseType(type: typeof(CustomResult<Guid>), statusCode: StatusCodes.Status200OK)]
	[ProducesResponseType(type: typeof(CustomResult), statusCode: StatusCodes.Status400BadRequest)]
	[HttpPost("")]
	public Task<IActionResult> Create{Singular}Async([FromBody] Create{Singular}CommandVm create{Singular}CommandVm)
	{
		var {SingularVar}Command = Mapper.Map<Create{Singular}Command>(create{Singular}CommandVm);
		return CreateAsync<Create{Singular}Command, Guid>({SingularVar}Command);
	}

}
