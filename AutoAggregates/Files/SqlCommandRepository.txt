using {ProjectName}.Core.Contracts.Aggregates.{Pluralize}.CommandRepositories;
using {ProjectName}.Core.Domain.Aggregates.{Pluralize};
using {ProjectName}.Infrastructure.Persistence.Sql.Commands.Common;

using MDF.Framework.Infrastructure.Commands;

using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace {ProjectName}.Infrastructure.Persistence.Sql.Commands.Aggregates.{Pluralize};
#error This file is generated by AutoMDF. This file needs to be edited before use. Delete this line when editing is complete.
public class {Singular}CommandEntityFrameworkRepository : BaseCommandEntityFrameworkRepository<{Singular}, CommandDbContext>, I{Singular}CommandRepository
{
	private readonly ILogger<{Singular}CommandEntityFrameworkRepository> _logger;
	public {Singular}CommandEntityFrameworkRepository(CommandDbContext dbContext,ILogger<{Singular}CommandEntityFrameworkRepository> logger) : base(dbContext)
	{
		_logger = logger;
	}
	//  در I{Singular}CommandRepository اضافه کرد
	//اینجا باید متد های مورد نیاز را نوشت
	
	//TODO Don't forget add DbSet<{Pluralize}> to Command db Context !
	//Sample:
	public async Task<bool> IsActive{Singular}Async(Guid {SingularVar}Id, CancellationToken cancellationToken)
	{
		
		var all{Pluralize} = await DbContext.{Pluralize}.ToListAsync(cancellationToken);
		var filtered{Pluralize} = all{Pluralize}
			.Any(c => c.Parent{Pluralize}Id.Any(pid => pid == {SingularVar}Id));
		return filtered{Pluralize};
	}
}
